<?php
/**
* @package shorty an ownCloud url shortener plugin
* @category internet
* @author Christian Reiner
* @copyright 2011-2015 Christian Reiner <foss@christian-reiner.info>
* @license GNU Affero General Public license (AGPL)
* @link information http://apps.owncloud.com/content/show.php/Shorty?content=150401
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
* License as published by the Free Software Foundation; either
* version 3 of the license, or any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU AFFERO GENERAL PUBLIC LICENSE for more details.
*
* You should have received a copy of the GNU Affero General Public
* License along with this library.
* If not, see <http://www.gnu.org/licenses/>.
*
*/

/**
 * @file relay.php
 * This is the plugins central relaying feature
 * All relay requests are handled by this file.
 * @access public
 * @author Christian Reiner
 */

namespace OCA\Shorty;

// swallow any accidental output generated by php notices and stuff to preserve a clean JSON reply structure
Tools::ob_control ( TRUE );

// Session checks
\OCP\App::checkAppEnabled ( 'shorty' );

$RUNTIME_NOSETUPFS = true;
\OCP\App::setActiveNavigationEntry ( 'shorty_index' );

$arg = NULL;
// we try to guess what the request indicates:
// - a (shorty) id to be looked up in the database resulting in a forwarding to the stored target
// - a (target) url to be added as a new shorty
// - none of the two, so just a plain list of existing shortys
foreach ($_GET as $key=>$val) // in case there are unexpected, additional arguments like a timestamp added by some stupid proxy
{
	switch ($key)
	{
		default:
			// unrecognized key, we ignore it
			break;

		case 'id':
		case 'shorty':
		case 'ref':
		case 'entry':
			// a recognized argument key indicating an id to be looked up
			$arg = Type::req_argument($key,Type::ID,FALSE);
			break 2; // skip switch AND foreach
	} // switch
} // foreach

// swallow any accidental output generated by php notices and stuff to preserve a clean JSON reply structure
Tools::ob_control ( FALSE );

// has an id been specified at all ?
if ( NULL==$arg )
{
	// nothing to forward to => 400: Bad Request
	throw new HttpException ( 400 );
}
// an id was specified, ordinary or special meaning ?
if ( '0000000000'===$arg )
{
	// this is a pseudo id, used to test the setup, so just return a positive message.
	// this is used to test the setup of the static backend, shorty calls itself from there
	\OCP\Util::writeLog( 'shorty', "Positive validation of static backend base url.", \OCP\Util::DEBUG );
	// the validation request requires a CORS header in case of a cross domain setups:
	header('Access-Control-Allow-Origin: *');
	header('Content-Type: application/json');
	\OCP\JSON::success ( [
		'id'       => $arg,
		'instance' => \OCP\Config::getSystemValue('instanceid')
	] );
	exit();
}

// now construct the target url and relay to it (if applicable)
try
{
	// detect requested shorty id from request
	$p_id = trim ( Type::normalize($arg,Type::ID) ) ;
	if ( $p_id )
	{
		$param   = [ 'id' => $p_id ];
		$query   = \OCP\DB::prepare ( Query::URL_RELAY );
		$result  = $query->execute($param)->FetchAll();
		$request = new \OCA\Shorty\Atom\AtomRequest([
			'address' => $_SERVER['REMOTE_ADDR'],
			'host'    => isset($_SERVER['REMOTE_HOST'])?$_SERVER['REMOTE_HOST']:gethostbyaddr($_SERVER['REMOTE_ADDR']),
			'time'    => $_SERVER['REQUEST_TIME'],
			'user'    => \OCP\User::getUser(),
		]);
		if ( FALSE===$result ) {
			throw new HttpException ( 500 );
		} elseif ( ! is_array($result) ) {
			throw new HttpException ( 500 );
		} elseif ( 0==sizeof($result) ) {
			// no entry found => 404: Not Found
			throw new HttpException ( 404 );
		} elseif ( 1<sizeof($result) ) {
			// multiple matches => 409: Conflict
			throw new HttpException ( 409 );
		} elseif ( (!array_key_exists(0,$result)) || (!is_array($result[0])) || (!array_key_exists('target',$result[0])) ) {
			// invalid entry => 500: Internal Server Error
			throw new HttpException ( 500 );
		} elseif ( (!array_key_exists('target',$result[0])) || ('1'==$result[0]['expired']) ) {
			// entry expired => 410: Gone
			throw new HttpException ( 410 );
		}
		// an usable target !
		$shorty = new \OCA\Shorty\Atom\AtomShorty($result[0]);
		// check status of matched entry
		switch ($shorty->getStatus())
		{
			default:
				// looks like an invalid shorty?
				Hook\Events::raiseEventShortyRelay ( $shorty, $request, 'blocked' );
				throw new HttpException ( 500 );
			case 'blocked':
				// refuse forwarding => 403: Forbidden
				Hook\Events::raiseEventShortyRelay ( $shorty, $request, 'blocked' );
				throw new HttpException ( 403 );
			case 'private':
				// check for a valid session and the required user account
				if ( ! ($account=\OC::$server->getSession()->get('user_id'))) {
					Hook\Events::raiseEventShortyRelay ( $shorty, $request, 'failed' );
					\OCP\User::checkLoggedIn();
				}
				if ($shorty->getUser()!==$account) {
					Hook\Events::raiseEventShortyRelay ( $shorty, $request, 'denied' );
					throw new HttpException ( 403 );
				}
				break;
			case 'shared':
				// check for a valid session
				if ( ! \OC::$server->getSession()->get('user_id')) {
					Hook\Events::raiseEventShortyRelay ( $shorty, $request, 'denied' );
					\OCP\User::checkLoggedIn();
				}
				break;
			case 'public':
				// no access restriction, so all fine!

		} // switch status

		// fetch template
		$tmpl = new \OCP\Template ( 'shorty', 'tmpl_wdg_relay', 'guest' );
		$tmpl->assign ( 'shorty', $shorty );
		// fetch meta data
		$tmpl->assign ( 'meta', Meta::fetchMetaData($shorty->getTarget()));
		// render template
		\OCP\Util::addStyle  ( 'shorty', 'shorty' );
		\OCP\Util::addStyle  ( 'shorty', 'relay' );
		\OCP\Util::addScript ( 'shorty', 'relay' );
		echo $tmpl->fetchPage ( );

		// finish this script to record the click, even if the client detaches right after the redirect
		ignore_user_abort ( TRUE );
		// register click
		Hook\Events::raiseEventShortyRelay ( $shorty, $request, 'granted' );
	} // if
} catch ( Exception $e ) {
    header($e->getMessage());
    throw new HttpException ( 500 );
}
